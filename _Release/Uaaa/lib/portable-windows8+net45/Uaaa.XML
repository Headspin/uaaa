<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Uaaa</name>
    </assembly>
    <members>
        <member name="T:Uaaa.ChangeManager">
            <summary>
            Manages object changes.
            </summary>
        </member>
        <member name="T:Uaaa.INotifyObjectChanged">
            <summary>
            Defines objects ability to notify its IsChanged status change.
            </summary>
        </member>
        <member name="M:Uaaa.INotifyObjectChanged.AcceptChanges">
            <summary>
            Accepts changed data so that object enters not changed state (IsChanged = false).
            </summary>
        </member>
        <member name="E:Uaaa.INotifyObjectChanged.ObjectChanged">
            <summary>
            Triggered when objects IsChanged property changes.
            </summary>
        </member>
        <member name="P:Uaaa.INotifyObjectChanged.IsChanged">
            <summary>
            True if object state is changed, false otherwise.
            </summary>
        </member>
        <member name="M:Uaaa.ChangeManager.#ctor">
            <summary>
            Creates new instance of ChangeManager.
            </summary>
        </member>
        <member name="M:Uaaa.ChangeManager.Track(Uaaa.INotifyObjectChanged)">
            <summary>
            Adds object to be tracked by change manager instance.
            </summary>
            <param name="trackedObject"></param>
        </member>
        <member name="M:Uaaa.ChangeManager.Remove(Uaaa.INotifyObjectChanged)">
            <summary>
            Removes object from change manager instance.
            </summary>
            <param name="trackedObject"></param>
        </member>
        <member name="M:Uaaa.ChangeManager.Reset">
            <summary>
            Resets change manager be clearing all tracking data.
            </summary>
        </member>
        <member name="M:Uaaa.ChangeManager.AcceptChanges">
            <summary>
            Accepts changes on all tracked objects.
            </summary>
        </member>
        <member name="E:Uaaa.ChangeManager.ObjectChanged">
            <summary>
            INotifyObjectChanged.ObjectChanged implementation.
            </summary>
        </member>
        <member name="P:Uaaa.ChangeManager.IsChanged">
            <summary>
            TRUE if object changed, FALSE otherwise.
            </summary>
        </member>
        <member name="T:Uaaa.Items`1">
            <summary>
            Observable collection of TItem.
            </summary>
            <typeparam name="TItem"></typeparam>
        </member>
        <member name="T:Uaaa.IModel">
            <summary>
            Defines common Model intefrace
            </summary>
        </member>
        <member name="M:Uaaa.IModel.RaisePropertyChanged(System.String)">
            <summary>
            Raises PropertyChanged event for provided property name.
            </summary>
            <param name="propertyName"></param>
        </member>
        <member name="M:Uaaa.Items`1.#ctor">
            <summary>
            Creates new object instance.
            </summary>
        </member>
        <member name="M:Uaaa.Items`1.GetAddedItems">
            <summary>
            Returns all items that were added to the initial items collection.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Uaaa.Items`1.GetRemovedItems">
            <summary>
            Returns all items that were removed from the initial items collection.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Uaaa.Items`1.InsertItem(System.Int32,`0)">
            <summary>
            Inserts item to the collection at specified index.
            </summary>
            <param name="index"></param>
            <param name="item"></param>
        </member>
        <member name="M:Uaaa.Items`1.ClearItems">
            <summary>
            Clears items collection.
            </summary>
        </member>
        <member name="M:Uaaa.Items`1.RemoveItem(System.Int32)">
            <summary>
            Removes item from collection.
            </summary>
            <param name="index"></param>
        </member>
        <member name="M:Uaaa.Items`1.SetItem(System.Int32,`0)">
            <summary>
            Sets the item at specified index.
            </summary>
            <param name="index"></param>
            <param name="item"></param>
        </member>
        <member name="M:Uaaa.Items`1.AcceptChanges">
            <summary>
            Accepts all changes made to the collection.
            Property IsChanged gets value False after method is finished.
            </summary>
        </member>
        <member name="P:Uaaa.Items`1.ChangeManager">
            <summary>
            ChangeManager object instance.
            </summary>
        </member>
        <member name="P:Uaaa.Items`1.LastAdded">
            <summary>
            Holds last item that was added to the collection.
            </summary>
        </member>
        <member name="E:Uaaa.Items`1.ObjectChanged">
            <see cref="E:Uaaa.INotifyObjectChanged.ObjectChanged"/>
        </member>
        <member name="P:Uaaa.Items`1.IsChanged">
            <see cref="P:Uaaa.INotifyObjectChanged.IsChanged"/>
        </member>
        <member name="T:Uaaa.Items`1.ItemsCounter`1">
            <summary>
            Counts marked items. Object is changed when count > 0;
            </summary>
            <typeparam name="TModel"></typeparam>
        </member>
        <member name="T:Uaaa.Model">
            <summary>
            Model base class that supports property change notification and change tracking.
            </summary>
        </member>
        <member name="F:Uaaa.Model.Property">
            <summary>
            Handles property values change tracking and notifications.
            Use PropertySetter for setting property values if you need INotifyPropertyChanged features.
            </summary>
        </member>
        <member name="M:Uaaa.Model.#ctor">
            <summary>
            Creates new model instance.
            </summary>
        </member>
        <member name="M:Uaaa.Model.AcceptChanges">
            <summary>
            Accepts changes made to the model.
            Method is applicable to models that have ChangeManager set.
            </summary>
        </member>
        <member name="M:Uaaa.Model.IsValid(System.String)">
            <summary>
            Checks model business rules and returns TRUE if all checked businessRules are valid.
            Property name can be provided to check rules bound to that specific property. All
            rules are checked if propery name not provided.
            </summary>
            <returns><c>true</c> if this instance is valid; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:Uaaa.Model.CreateChangeManager">
            <summary>
            Create change manager if object change notification is required.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Uaaa.Model.CreateRulesChecker">
            <summary>
            Creates the rules checker that handles business rules checking.
            </summary>
            <returns>The rules checker.</returns>
        </member>
        <member name="M:Uaaa.Model.OnSetInitialValues">
            <summary>
            Sets instance initial values for change tracking.
            </summary>
        </member>
        <member name="M:Uaaa.Model.InitializeCore(System.Action)">
            <summary>
            Initializes object instance data and resets change tracking to its initial state.
            Use this method when implementing initializers.
            </summary>
            <param name="initializeObject"></param>
        </member>
        <member name="M:Uaaa.Model.RaisePropertyChanged(System.String)">
            <summary>
            Triggers PropertyChanged event.
            </summary>
            <param name="propertyName"></param> 
        </member>
        <member name="M:Uaaa.Model.OnObjectChanged">
            <summary>
            Raises ObjectChanged event.
            </summary>
        </member>
        <member name="M:Uaaa.Model.GetErrors(System.String)">
            <see cref="M:System.ComponentModel.INotifyDataErrorInfo.GetErrors(System.String)"/>
        </member>
        <member name="M:Uaaa.Model.OnErrorsChanged(System.ComponentModel.DataErrorsChangedEventArgs)">
            <summary>
            Raises ErrorsChanged event.
            </summary>
            <param name="args"></param>
        </member>
        <member name="P:Uaaa.Model.ChangeManager">
            <summary>
            ChangeManager instance for hierarchical change tracking.
            Instance should be set when needed by overriding CreateChangeManager method.
            </summary>
        </member>
        <member name="P:Uaaa.Model.RulesChecker">
            <summary>
            BusinessRulesChecker that checks model business rules.
            </summary>
            <value>The rules checker.</value>
        </member>
        <member name="E:Uaaa.Model.PropertyChanged">
            <summary>
            INotifyPropertyChanged.PropertyChanged implementation.
            </summary>
        </member>
        <member name="E:Uaaa.Model.ObjectChanged">
            <summary>
            INotifyObjectChanged.ObjectChanged implementation
            </summary>
        </member>
        <member name="P:Uaaa.Model.IsChanged">
            <summary>
            TRUE if object changed, false otherwise.
            </summary>
        </member>
        <member name="E:Uaaa.Model.ErrorsChanged">
            <see cref="E:System.ComponentModel.INotifyDataErrorInfo.ErrorsChanged"/>
        </member>
        <member name="P:Uaaa.Model.HasErrors">
            <see cref="P:System.ComponentModel.INotifyDataErrorInfo.HasErrors"/>
        </member>
        <member name="M:Uaaa.Items`1.ItemsCounter`1.AcceptChanges">
            <summary>
            Accepts chages by reseting the counter.
            </summary>
        </member>
        <member name="T:Uaaa.PropertyTriggers`1">
            <summary>
            Handles TModel property changes and invokes appropriate triggers for given property.
            </summary>
            <typeparam name="TModel"></typeparam>
        </member>
        <member name="M:Uaaa.PropertyTriggers`1.#ctor">
            <summary>
            Creates new object instance.
            </summary>
        </member>
        <member name="M:Uaaa.PropertyTriggers`1.Add(System.String,System.Action{`0},System.Predicate{`0})">
            <summary>
            Adds trigger for property.
            </summary>
            <param name="propertyName"></param>
            <param name="action">Trigger action to be invoked.</param>
            <param name="condition">Trigger condition.</param>
        </member>
        <member name="M:Uaaa.PropertyTriggers`1.TriggerAll(`0)">
            <summary>
            Invokes all registered triggers.
            </summary>
            <param name="model"></param>
        </member>
        <member name="M:Uaaa.PropertyTriggers`1.Dispose">
            <see cref="M:System.IDisposable.Dispose"/>
        </member>
        <member name="P:Uaaa.PropertyTriggers`1.Model">
            <summary>
            Model object being observed.
            </summary>
        </member>
        <member name="T:Uaaa.PropertyTriggers`1.Trigger">
            <summary>
            Defines condition and action that should be executed if condition is met.
            </summary>
        </member>
        <member name="F:Uaaa.PropertyTriggers`1.Trigger._condition">
            <summary>
            Trigger condition.
            </summary>
        </member>
        <member name="F:Uaaa.PropertyTriggers`1.Trigger._action">
            <summary>
            Trigger action.
            </summary>
        </member>
        <member name="M:Uaaa.PropertyTriggers`1.Trigger.#ctor(System.Action{`0},System.Predicate{`0})">
            <summary>
            Creates new unconditional trigger.
            </summary>
            <param name="action"></param>
            <param name="condition">Condition that is evaluated before trigger action is invoked.</param>
        </member>
        <member name="M:Uaaa.PropertyTriggers`1.Trigger.Invoke(`0)">
            <summary>
            Invokes the trigger.
            </summary>
            <param name="model"></param>
            <returns></returns>
        </member>
        <member name="T:Uaaa.IDescriptor">
            <summary>
            Defines descriptor object.
            </summary>
        </member>
        <member name="P:Uaaa.IDescriptor.Label">
            <summary>
            Object label.
            </summary>
        </member>
        <member name="P:Uaaa.IDescriptor.Description">
            <summary>
            Object description.
            </summary>
        </member>
        <member name="T:Uaaa.Descriptor`1">
            <summary>
            Append description to the value.
            </summary>
            <typeparam name="TValue"></typeparam>
        </member>
        <member name="T:Uaaa.IViewModel">
            <summary>
            Defines common ViewModel interface.
            </summary>
        </member>
        <member name="M:Uaaa.IViewModel.GetModel">
            <summary>
            Returns model value.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Uaaa.IViewModel.SetModel(System.Object)">
            <summary>
            Sets model value.
            </summary>
            <param name="model"></param>
            <returns></returns>
        </member>
        <member name="M:Uaaa.Descriptor`1.#ctor(`0,System.String,System.String)">
            <summary>
            Creates new instance of descriptor class.
            </summary>
            <param name="value"></param>
            <param name="label"><see cref="P:Uaaa.IDescriptor.Label"/></param>
            <param name="description"><see cref="P:Uaaa.IDescriptor.Description"/></param>
        </member>
        <member name="M:Uaaa.Descriptor`1.ToString">
            <summary>
            Returns descriptors label.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Uaaa.Descriptor`1.op_Implicit(Uaaa.Descriptor{`0})~`0">
            <summary>
            Returns model.
            </summary>
            <param name="descriptor"></param>
            <returns></returns>
        </member>
        <member name="P:Uaaa.Descriptor`1.Value">
            <summary>
            Value object which is described by the descriptor.
            </summary>
        </member>
        <member name="P:Uaaa.Descriptor`1.Label">
            <see cref="P:Uaaa.IDescriptor.Label"/>
        </member>
        <member name="P:Uaaa.Descriptor`1.Description">
            <see cref="P:Uaaa.IDescriptor.Description"/>
        </member>
        <member name="T:Uaaa.PropertySetter">
            <summary>
            Handles property change tracking and notifications.
            </summary>
        </member>
        <member name="M:Uaaa.PropertySetter.#ctor(Uaaa.IModel)">
            <summary>
            Creates new instance of PropertySetter class for the provided model.
            </summary>
            <param name="model"></param>
        </member>
        <member name="M:Uaaa.PropertySetter.Set``1(``0@,``0,System.String,System.Collections.Generic.IEqualityComparer{``0},System.Func{System.Boolean})">
            <summary>
            Sets new property value and stores it to a backing store variable.
            </summary>
            <typeparam name="T">Property store type.</typeparam>
            <param name="store">Property backing store field.</param>
            <param name="value">New property value.</param>
            <param name="propertyName">Name of property being changed.</param>
            <param name="comparer">Comparer used to compare current and new property value.</param>
            <param name="canChange">Return true if property is allowed to change, false otherwise.</param>
            <returns>TRUE if property value changed.</returns>
        </member>
        <member name="M:Uaaa.PropertySetter.Init``1(``0@,``0,System.String)">
            <summary>
            Set initial property value for change tracked property.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="store"></param>
            <param name="value"></param>
            <param name="propertyName"></param>
        </member>
        <member name="M:Uaaa.PropertySetter.AcceptChanges">
            <summary>
            Accept changes by seting changed property values to initial property values.
            </summary>
        </member>
        <member name="P:Uaaa.PropertySetter.IsTrackingChanges">
            <summary>
            TRUE when change tracking is enabled by setting inital value of at least one property.
            </summary>
        </member>
        <member name="E:Uaaa.PropertySetter.ObjectChanged">
            <summary>
            INotifyObjectChanged.ObjectChanged implementation.
            </summary>
        </member>
        <member name="P:Uaaa.PropertySetter.IsChanged">
            <summary>
            Returns TRUE if object is changed, FALSE otherwise.
            </summary>
        </member>
        <member name="T:Uaaa.ViewModel`1">
            <summary>
            ViewModel base class that support property change notifications.
            </summary>
        </member>
        <member name="F:Uaaa.ViewModel`1.Property">
            <summary>
            PropertySetter instance for setting property values.
            </summary>
        </member>
        <member name="F:Uaaa.ViewModel`1.Triggers">
            <summary>
            Model property triggers.
            </summary>
        </member>
        <member name="M:Uaaa.ViewModel`1.#ctor">
            <summary>
            Creates new object instance.
            </summary>
        </member>
        <member name="M:Uaaa.ViewModel`1.#ctor(`0)">
            <summary>
            Creates new object instance.
            </summary>
            <param name="model"></param>
        </member>
        <member name="M:Uaaa.ViewModel`1.OnModelChanged">
            <summary>
            Triggers optional actions after model value changed.
            </summary>
        </member>
        <member name="M:Uaaa.ViewModel`1.RaisePropertyChanged(System.String)">
            <summary>
            Raises PropertyChanged event for specific property name.
            </summary>
            <param name="propertyName"></param>
        </member>
        <member name="M:Uaaa.ViewModel`1.Dispose">
            <see cref="M:System.IDisposable.Dispose"/>
        </member>
        <member name="M:Uaaa.ViewModel`1.Dispose(System.Boolean)">
            <summary>
            Disposes the object.
            </summary>
            <param name="disposing"></param>
        </member>
        <member name="M:Uaaa.ViewModel`1.op_Implicit(Uaaa.ViewModel{`0})~`0">
            <summary>
            Returns model.
            </summary>
            <param name="viewModel"></param>
            <returns></returns>
        </member>
        <member name="P:Uaaa.ViewModel`1.Model">
            <summary>
            Model object.
            </summary>
        </member>
        <member name="P:Uaaa.ViewModel`1.IsReadonly">
            <summary>
            ViewModel is flagged as ReadOnly (model can only be set once).
            </summary>
        </member>
        <member name="E:Uaaa.ViewModel`1.PropertyChanged">
            <see cref="E:System.ComponentModel.INotifyPropertyChanged.PropertyChanged"/>
        </member>
        <member name="T:Uaaa.BusinessRule">
            <summary>
            Provides model business rule validation checking.
            </summary>
        </member>
        <member name="F:Uaaa.BusinessRule.Error">
            <summary>
            Defines business rule error message.
            </summary>
        </member>
        <member name="M:Uaaa.BusinessRule.#ctor(System.String)">
            <summary>
            Creates new object instance.
            </summary>
            <param name="error"></param>
        </member>
        <member name="M:Uaaa.BusinessRule.IsValid(System.Object)">
            <summary>
            Validates the rule.
            </summary>
            <param name="model"></param>
            <returns></returns>
        </member>
        <member name="T:Uaaa.GenericRule`1">
            <summary>
            Generic business rule implementation.
            </summary>
        </member>
        <member name="M:Uaaa.GenericRule`1.#ctor(System.Predicate{`0},System.String)">
            <summary>
            Creates new object instance.
            </summary>
            <param name="criteria">Criteria for evaluation the rule validity.</param>
            <param name="error"></param>
        </member>
        <member name="M:Uaaa.GenericRule`1.IsValid(System.Object)">
            <see cref="M:Uaaa.BusinessRule.IsValid(System.Object)"/>
        </member>
        <member name="T:Uaaa.BusinessRulesChecker">
            <summary>
            Implements INotifyDataErrorInfo and handles data validation by checking added business rules.
            </summary>
        </member>
        <member name="M:Uaaa.BusinessRulesChecker.#ctor">
            <summary>
            Creates new object instance.
            </summary>
        </member>
        <member name="M:Uaaa.BusinessRulesChecker.Add(Uaaa.BusinessRule,System.String)">
            <summary>
            Adds business rules to checker instance.
            Provide property name to bind business rule to specific model property.
            </summary>
            <param name="rule"></param>
            <param name = "propertyName">Name of property which is validated by provided business rule. Use "" when business rule is not speficic to any model property.</param>
        </member>
        <member name="M:Uaaa.BusinessRulesChecker.Remove(Uaaa.BusinessRule)">
            <summary>
            Removes business rule from checker instance.
            </summary>
            <param name="rule"></param>
        </member>
        <member name="M:Uaaa.BusinessRulesChecker.IsValid(System.Object,System.String)">
            <summary>
            Checks business rules with provided model as context.
            Property name can be provided to check rules bound to that specific property.
            All rules are checked if property name not provided.
            </summary>
            <returns><c>true</c> if this instance is valid the specified model propertyName; otherwise, <c>false</c>.</returns>
            <param name="model">Model.</param>
            <param name="propertyName">Property name.</param>
        </member>
        <member name="M:Uaaa.BusinessRulesChecker.GetErrors(System.String)">
            <summary>
            INotifyDataErrorInfo.GetErrors(propertyName) implementation.
            </summary>
            <returns>The errors.</returns>
            <param name="propertyName">Property name.</param>
        </member>
        <member name="E:Uaaa.BusinessRulesChecker.PropertyChanged">
            <see cref="E:System.ComponentModel.INotifyPropertyChanged.PropertyChanged"/>
        </member>
        <member name="E:Uaaa.BusinessRulesChecker.ErrorsChanged">
            <summary>
            INotifyDataErrorInfo.ErrorsChanged event.
            </summary>
        </member>
        <member name="P:Uaaa.BusinessRulesChecker.HasErrors">
            <summary>
            INotifyDataErrorInfo.HasErrors property implementation.
            </summary>
            <value><c>true</c> if this instance has errors; otherwise, <c>false</c>.</value>
        </member>
        <member name="T:Uaaa.NotifyDataErrorInfoExtensions">
            <summary>
            INotifyDataErrorInfo extension methods.
            </summary>
        </member>
        <member name="M:Uaaa.NotifyDataErrorInfoExtensions.GetErrorsCollection(System.ComponentModel.INotifyDataErrorInfo,System.String)">
            <summary>
            Returns errors items collection.
            </summary>
            <returns>The errors list.</returns>
            <param name="errorInfo">Error info.</param>
            <param name="propertyName">Propery name.</param>
        </member>
    </members>
</doc>
